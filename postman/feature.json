{
	"info": {
		"_postman_id": "0c99faa9-8568-4c94-a4fb-e56e672cc541",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28941588"
	},
	"item": [
		{
			"name": "Добавление новой подписки(user 1 подписывается на user 2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Подписка должна содержать поля: id, name, email\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('authorOfContent');\r",
							"pm.expect(target).to.have.property('subscriber');\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.authorOfContent.id).equal(2, 'Id пользователя, на которого подписываются, должно соответствовать отправленному в запросе');\r",
							"    pm.expect(target.subscriber.id).equal(1, 'Id пользователя, который подписывается, должно соответствовать отправленному в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/1/subscriptions/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"subscriptions",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление новой подписки(user 1 подписывается на user 3)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Подписка должна содержать поля: id, name, email\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('authorOfContent');\r",
							"pm.expect(target).to.have.property('subscriber');\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.authorOfContent.id).equal(3, 'Id пользователя, на которого подписываются, должно соответствовать отправленному в запросе');\r",
							"    pm.expect(target.subscriber.id).equal(1, 'Id пользователя, который подписывается, должно соответствовать отправленному в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/1/subscriptions/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"subscriptions",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление новой подписки(user 2 подписывается на user 1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Подписка должна содержать поля: id, name, email\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('authorOfContent');\r",
							"pm.expect(target).to.have.property('subscriber');\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.authorOfContent.id).equal(1, 'Id пользователя, на которого подписываются, должно соответствовать отправленному в запросе');\r",
							"    pm.expect(target.subscriber.id).equal(2, 'Id пользователя, который подписывается, должно соответствовать отправленному в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/2/subscriptions/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"2",
						"subscriptions",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление новой подписки(user 3 подписывается на user 5)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Подписка должна содержать поля: id, name, email\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('authorOfContent');\r",
							"pm.expect(target).to.have.property('subscriber');\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.authorOfContent.id).equal(5, 'Id пользователя, на которого подписываются, должно соответствовать отправленному в запросе');\r",
							"    pm.expect(target.subscriber.id).equal(3, 'Id пользователя, который подписывается, должно соответствовать отправленному в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/3/subscriptions/5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"3",
						"subscriptions",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск исходящих подписок пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Подписки должны содержать поля: id, authorOfContent, created\", function () {\r",
							"    pm.expect(target[0]).to.have.property('id');\r",
							"    pm.expect(target[0]).to.have.property('authorOfContent');\r",
							"    pm.expect(target[0]).to.have.property('created');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/1/subscriptions/outgoing",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"subscriptions",
						"outgoing"
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск входящих подписок пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Подписки должны содержать поля: id, authorOfContent, created\", function () {\r",
							"    pm.expect(target[0]).to.have.property('id');\r",
							"    pm.expect(target[0]).to.have.property('subscriber');\r",
							"    pm.expect(target[0]).to.have.property('created');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/1/subscriptions/incoming",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"subscriptions",
						"incoming"
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск подписки по id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Подписки должны содержать поля: id, authorOfContent,subscriber, created\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('authorOfContent');\r",
							"    pm.expect(target).to.have.property('subscriber');\r",
							"    pm.expect(target).to.have.property('created');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/1/subscriptions/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"subscriptions",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск всех подписок админом",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Подписки должны содержать поля: id, authorOfContent, created\", function () {\r",
							"    pm.expect(target[0]).to.have.property('id');\r",
							"    pm.expect(target[0]).to.have.property('subscriber');\r",
							"    pm.expect(target[0]).to.have.property('created');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/subscriptions",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"subscriptions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск актуальных событий пользователей, на которых подписан",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"События должны содержать поля: annotation, category, confirmedRequests, eventDate, id, initiator, paid, title, views\", function () {\r",
							"    pm.expect(target[0]).to.have.property('annotation');\r",
							"    pm.expect(target[0]).to.have.property('category');\r",
							"    pm.expect(target[0]).to.have.property('confirmedRequests');\r",
							"    pm.expect(target[0]).to.have.property('eventDate');\r",
							"    pm.expect(target[0]).to.have.property('id');\r",
							"    pm.expect(target[0]).to.have.property('initiator');\r",
							"    pm.expect(target[0]).to.have.property('paid');\r",
							"    pm.expect(target[0]).to.have.property('title');\r",
							"    pm.expect(target[0]).to.have.property('title');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/1/subscriptions/events",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"subscriptions",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление подписки по id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/3/subscriptions/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"3",
						"subscriptions",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление всех входящих подписок пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/1/subscriptions/incoming",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"subscriptions",
						"incoming"
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск входящих подписок пользователя после удаления",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.expect(target).to.be.an('array').that.is.empty;\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/1/subscriptions/incoming",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"subscriptions",
						"incoming"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление всех исходящих подписок пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/1/subscriptions/outgoing",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"subscriptions",
						"outgoing"
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск исходящих подписок пользователя Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.expect(target).to.be.an('array').that.is.empty;\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/1/subscriptions/outgoing",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"subscriptions",
						"outgoing"
					]
				}
			},
			"response": []
		}
	]
}